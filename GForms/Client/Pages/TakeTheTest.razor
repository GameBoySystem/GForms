@page "/TakeTheTest/{id:int}"
@* @page "/TakeTheTest/{id:int}/{questionId:int}" *@
@inject ITestService TestService
@inject IQuestionService QuestionService
@inject IAnswerVariantService AnswerVariantService
@inject IAnswerService AnswerService
@inject NavigationManager NavigationManager


<MudText Typo="Typo.h5" Class="mt-6">@test.Title</MudText>
<MudText Typo="Typo.h4" Class="mt-6">@question.Text</MudText>

@if (question.AnswerVariants != null && question.AnswerVariants.Count > 0)
{
    string? typeOfFirst = question.AnswerVariants[0].TypeOfAnswer;



    <EditForm Model="answer">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                @switch (typeOfFirst)
                {
                case "text":
                <MudTextField @bind-Value="@answer.Text"
                              Placeholder="@question.AnswerVariants[0].Text"
                              Variant="Variant.Outlined">
                </MudTextField>
                break;
                case "radio":
                <MudField Variant="Variant.Outlined">
                    <MudRadioGroup @bind-Value="@answer.Text">
                        @foreach (var answerVariant in question.AnswerVariants)
                        {
                            <MudRadio Color="Color.Primary"
                                      UnCheckedColor="Color.Default"
                                      Value="@answerVariant.Text">
                                @answerVariant.Text
                            </MudRadio>
                            <MudSpacer />
                        }
                    </MudRadioGroup>
                </MudField>
                break;
                }
            </MudCardContent>
        </MudCard>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton StartIcon="@Icons.Material.Filled.ArrowBack"
                       >
                Предыдущий вопрос
            </MudButton>
            <MudButton EndIcon="@Icons.Material.Filled.ArrowForward"
                       OnClick="NextQuestion">
                Следующий вопрос
            </MudButton>
        </MudButtonGroup>
    </EditForm>
}




@code {
    [Parameter]
    public int? Id { get; set; }

    private string? selectedAnswer;
    public int i = 0;

    Test test = new Test();
    Question question = new Question();
    Answer answer = new Answer();
    List<Question> QuestionList = new List<Question>();

    DateTime time = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        // if (Id.HasValue)
        // {
        //     test.Id = Id.Value;
        // }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await TestService.GetTest((int)Id);
            if (result is not null)
                test = result;
            else
                NavigationManager.NavigateTo("/");
        }

        await LoadNextQuestion();

        foreach (var q in test.Questions)
        {
            QuestionList.Add(q);
        }
    }

    private async Task LoadNextQuestion()
    {
        question = test.Questions[i];
        answer.Text = null;
    }

    private async Task NextQuestion()
    {
        if (answer.Text != null)
        {
            answer.Data = time;
            await AnswerService.PostAnswer(answer, question.Id);
        }
        else
        {
            // Если ответ не выбран, можно вывести сообщение об ошибке или сделать что-то еще
            Console.WriteLine("Выберите ответ перед переходом к следующему вопросу.");
            return;
        }

        i++;
        await LoadNextQuestion();
    }
}

