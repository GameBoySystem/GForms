@page "/MyQuestion/{testId:int}"
@page "/MyQuestion/{testId:int}/{Id:int}"
@inject ITestService TestService
@inject IQuestionService QuestionService
@inject IAnswerVariantService AnswerVariantService
@inject NavigationManager NavigationManager

<PageTitle>@(Id == null ? "Добавление нового вопроса" : "Редактирование вопроса")</PageTitle>
<MudText Typo="Typo.h4" Class="mt-6">@(Id == null ? "Добавление нового вопроса" : "Редактирование вопроса")</MudText>

<MudCard>
    <MudCardContent>
        <EditForm Model="question" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <MudTextField Label="Текст вопроса" @bind-Value="question.Text" For="@(() => question.Text)" />
        </EditForm>

        @if (Id is not null)
        {
            <EditForm Model="answerVariant" OnValidSubmit="AddVariant">
                <DataAnnotationsValidator />
                <MudTextField Label="Текст варианта ответа" @bind-Value="answerVariant.Text" For="@(() => answerVariant.Text)" />
            </EditForm>
        }
    </MudCardContent>
</MudCard>

<MudButton Color="Color.Primary"
           Class="fixed-bottom-button ma-2"
           Variant="Variant.Outlined"
           OnClick="HandleSubmit">
    @(Id == null ? "Добавить вопрос" : "Редактировать вопрос")
</MudButton>

@if (Id is not null)
{
    <MudButton Color="Color.Primary"
               Class="fixed-bottom-button ma-2"
               Variant="Variant.Outlined"
               OnClick="AddVariant">
        Добавить вариант ответа
    </MudButton>
}

@code {
    [Parameter]
    public int testId { get; set; }

    [Parameter]
    public int? Id { get; set; }

    Question question = new Question();
    AnswerVariant answerVariant = new AnswerVariant();

    public string SelectedAnswerType;

    private List<string> AnswerTypes { get; set; } = new List<string>
    {
        "text",
        "radio"
    };

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await QuestionService.GetQuestion((int)Id);
            if (result is not null)
                question = result;
            else
                NavigationManager.NavigateTo("/");
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await QuestionService.PostQuestion(testId, question);
        }
        else
        {
            await QuestionService.PutQuestion((int)Id, question);
        }
    }

    async Task DeleteQuestion(int questionId)
    {
        await QuestionService.DeleteQuestion((int)questionId);
    }

    async Task AddVariant()
    {
        answerVariant.TypeOfAnswer = "radio";
        await AnswerVariantService.PostAnswerVariant(answerVariant, (int)Id);
    }
}
