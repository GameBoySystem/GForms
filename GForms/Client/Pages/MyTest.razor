@page "/MyTest"
@page "/MyTest/{id:int}"
@inject ITestService TestService
@inject IQuestionService QuestionService
@inject NavigationManager NavigationManager

<PageTitle>@(Id == null ? "Создание новой формы" : "Редактирование формы")</PageTitle>
<MudText Typo="Typo.h4" Class="mt-6">@(Id == null ? "Создание новой формы" : "Редактирование формы")</MudText>

<EditForm Model="test" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="test.Title" Label="Название теста"></MudTextField>
        </MudCardContent>
        @if (test != null && test.Questions != null)
        {
            @foreach (var question in test.Questions)
            {
                <MudCardContent>
                    <MudCardContent>
                        <MudGrid Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h6">@question.Text</MudText>
                            <MudButtonGroup>
                                <MudIconButton @onclick="(() => EditQuestion(question.Id))"
                                               Icon="@Icons.Material.Rounded.Edit"
                                               Color="Color.Info"
                                               Variant="Variant.Outlined">
                                </MudIconButton>
                                <MudIconButton @onclick="(() => DeleteQuestion(question.Id))"
                                               Icon="@Icons.Material.Rounded.DeleteOutline"
                                               Color="Color.Secondary"
                                               Variant="Variant.Outlined">
                                </MudIconButton>
                            </MudButtonGroup>
                        </MudGrid>
                    </MudCardContent>


                    @if (question.AnswerVariants != null && question.AnswerVariants.Count > 0)
                    {
                        string? typeOfFirst = question.AnswerVariants[0].TypeOfAnswer;

                        switch (typeOfFirst)
                        {
                            case "text":
                                <MudTextField @bind-Value="question.AnswerVariants[0].Text"
                                              Variant="Variant.Outlined"
                                              Disabled="true">
                                </MudTextField>
                                break;
                            case "radio":
                                <MudField Variant="Variant.Outlined">
                                    <MudRadioGroup @bind-Value="@SelectedAnswer">
                                        @foreach (var answerVariant in question.AnswerVariants)
                                        {
                                            <MudRadio Color="Color.Primary"
                                                      UnCheckedColor="Color.Default"
                                                      Disabled="true"
                                                      Value="@answerVariant.Text">
                                                @answerVariant.Text
                                            </MudRadio>
                                            <MudSpacer />
                                        }
                                    </MudRadioGroup>
                                </MudField>
                                break;
                        }
                    }
                    else
                    {
                        <MudCardContent>
                            <MudText>Answer Variants not found</MudText>
                        </MudCardContent>
                    }
                </MudCardContent>
            }
        }
    </MudCard>
    <MudCardActions>
        <MudButton Color="Color.Primary"
                   Class="fixed-bottom-button ma-2"
                   Variant="Variant.Outlined"
                   OnClick="HandleSubmit">
            @(Id == null ? "Создать новую форму" : "Редактировать форму")
        </MudButton>
        <MudButton Color="Color.Primary"
                   Class="fixed-bottom-button ma-2"
                   Variant="Variant.Outlined"
                   OnClick="AddQuestion">
            Добавить вопрос
        </MudButton>
    </MudCardActions>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    public string? SelectedAnswer { get; set; }

    Test test = new Test();
    Question question = new Question();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            test.Id = Id.Value;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await TestService.GetTest((int)Id);
            if (result is not null)
                test = result;
            else
                NavigationManager.NavigateTo("/");
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await TestService.PostTest(test);

        }
        else
        {
            await TestService.PutTest((int)Id, test);
        }
    }

    void AddQuestion()
    {
        NavigationManager.NavigateTo($"/MyQuestion/{Id}");
    }

    void EditQuestion(int questionId)
    {
        NavigationManager.NavigateTo($"/MyQuestion/{Id}/{questionId}");
    }

    async Task DeleteQuestion(int questionId)
    {
        await QuestionService.DeleteQuestion((int)questionId);
        if (Id is not null)
        {
            test = await TestService.GetTest((int)Id);
            StateHasChanged();
        }
    }
}
